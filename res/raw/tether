#!/system/bin/sh
# @Version=16
# Copyright 2008 parrothd
# Copyright 2009 zodiac (Markus Gutschke)

dir=/data/data/android.tether
tetherlog="$dir"/var/tether.log
mac_whitelist="$dir"/conf/whitelist_mac.conf
dnsmasq_pidfile="$dir"/var/dnsmasq.pid
dnsmasq_leasefile="$dir"/var/dnsmasq.leases
dnsmasq="$dir"/bin/dnsmasq
dnsmasq_conf="$dir"/conf/dnsmasq.conf
iptables="$dir"/bin/iptables
tiwlan_ini="$dir"/conf/tiwlan.ini
wpa_supplicant_conf="$dir"/conf/wpa_supplicant.conf
pand_pidfile="$dir"/var/pand.pid

really_kill() {
  kill -2 "$1" || :
  kill -0 "$1" && {
    sleep 1
    kill -9 "$1"
  } || :
  kill -0 "$1" || {
    echo "Failed to kill process $1"
    false
  }
}

run() {
    if eval { "$1;" } >/dev/null 2>&1; then
      local i
      echo -n "<div class=\"date\">`date +"%d.%m.%y %T"`</div><div class=\"action\">$2...</div><div class=\"output\">" >>"$tetherlog"
      if i=`eval "$3" 2>&1`; then
        echo "</div><div class=\"done\">done</div><hr>" >>"$tetherlog"
      else
        { echo "$i" | while read i; do echo -n "$i<br />"; done
        echo "</div><div class=\"failed\">failed</div><hr>"; } >>"$tetherlog"
      fi
    fi
}

startwifi() {
    ## Stop current users
    stopwifi

    ## Loading wlan.ko module
    run '!({ echo; lsmod; } | while read m; do case "$m" in wlan*) break;; esac; false; done)' \
        "Loading wlan.ko module" \
        'insmod /system/lib/modules/wlan.ko'

    ## Configuring WiFi
    run : \
        "Configuring WiFi interface" \
        'wlan_loader -f /system/etc/wifi/Fw1251r1c.bin -e /proc/calibration -i "$tiwlan_ini"'
    
    ## Activating Wifi-Encryption
    run "dd if='$wpa_supplicant_conf' >/dev/null 2>&1" \
        "Activating Wifi encryption" \
        'cd /data/local/tmp;wpa_supplicant -B -f -Dtiwlan0 -itiwlan0 -c"$wpa_supplicant_conf"'
}

stopwifi() {
    ## Stopping current users of the wifi interface
    run 'ps | while read u p pp v r w pc s n; do case "$n" in *dnsmasq*|*wpa_supplicant*|*dhcp*) break;; esac; false; done' \
        "Stopping current WiFi users" \
        '{ ps | while read u p pp v r w pc s n; do case "$n" in *dnsmasq*|*wpa_supplicant*|*dhcp*) really_kill "$p";; esac; done; :; }'

    # Unloading module
    run '{ echo; lsmod; } | while read m; do case "$m" in wlan*) break;; esac; false; done' \
        "Unloading wlan.ko module" \
        '"$dir"/bin/rmmod wlan'
    sleep 2;
}

startbluetooth() {
    ## Loading bnep.ko module
    run '!({ echo; lsmod; } | while read m; do case "$m" in *bnep*) break;; esac; false; done)' \
        "Loading bnep.ko module" \
        'insmod /sdcard/android.tether/bnep.ko'
}

stopbluetooth() {
    # Unloading module
    run '{ echo; lsmod; } | while read m; do case "$m" in *bnep*) break;; esac; false; done' \
        "Unloading bnep.ko module" \
        '"$dir"/bin/rmmod bnep'
}

startpand() {
    ## Starting pand
    run '!(ps | while read u p pp v r w pc s n; do case "$n" in *pand*) break;; esac; false; done)' \
        "Starting pand" \
        '"$dir"/bin/pand --listen --role NAP --devup "$dir"/bin/blue-up.sh --devdown "$dir"/bin/blue-down.sh --pidfile "$dir"/var/pand.pid'
}

stoppand() {
    ## Stopping pand
    "$dir"/bin/pand -K
    sleep 2;
    run 'ps | while read u p pp v r w pc s n; do case "$n" in *pand*) break;; esac; false; done' \
        "Stopping pand" \
        'ps | while read u p pp v r w pc s n; do case "$n" in *pand*) kill -9 "$p" 2>/dev/null;; esac; done; rm '"'$pand_pidfile' 2>/dev/null"
}

startint() {
    # Configuring network interface
    run '{ echo; lsmod; } | while read m; do case "$m" in wlan*) break;; esac; false; done' \
        "Configuring network interface" \
        'ifconfig tiwlan0 192.168.2.254 netmask 255.255.255.0 && ifconfig tiwlan0 up'
}

stopint() {
    # Shutting down network interface
    run '{ echo; lsmod; } | while read m; do case "$m" in wlan*) break;; esac; false; done' \
        "Shutting down network interface" \
        'ifconfig tiwlan0 down'
}

startipt() {
    ## Setting up firewall rules
    run : \
        "Setting up firewall rules" \
        '"$iptables" -F &&
         "$iptables" -F -t nat &&
         "$iptables" -I FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT &&
         "$iptables" -I FORWARD -s 192.168.2.0/24 -j ACCEPT &&
         "$iptables" -P FORWARD DROP &&
         "$iptables" -t nat -I POSTROUTING -s 192.168.2.0/24 -j MASQUERADE'
}

stopipt() {
    ## Tearing down firewall rules
    run :\
        "Tearing down firewall rules" \
        '"$iptables" -F &&
		"$iptables" -t nat -F &&
		"$iptables" -X &&
		"$iptables" -t nat -X &&
        "$iptables" -P FORWARD ACCEPT'
}

startipfw() {
    ## Enabling IP forwarding
    run 'case "`cat /proc/sys/net/ipv4/ip_forward`" in 1) false;; esac' \
        "Enabling IP forwarding" \
        '{ echo 1 > /proc/sys/net/ipv4/ip_forward; }'
}
stopipfw() {
    ## Disabling IP forwarding
    run 'case "`cat /proc/sys/net/ipv4/ip_forward`" in 0) false;; esac' \
        "Disabling IP forwarding" \
        '{ echo 0 > /proc/sys/net/ipv4/ip_forward; }'
}

startdnsmasq() {
    ## Starting dnsmasq
    run '!(ps | while read u p pp v r w pc s n; do case "$n" in *dnsmasq*) break;; esac; false; done)' \
        "Starting dnsmasq" \
        '"$dnsmasq" --conf-file="$dnsmasq_conf"'
}

stopdnsmasq() {
    ## Stopping dnsmasq
    run 'ps | while read u p pp v r w pc s n; do case "$n" in *dnsmasq*) break;; esac; false; done' \
        "Stopping dnsmasq" \
        'ps | while read u p pp v r w pc s n; do case "$n" in *dnsmasq*) really_kill "$p";; esac; done; rm '"'$dnsmasq_pidfile' 2>/dev/null"
}

startsecnat() {
    ## Activating MAC access control
    run "dd if='$mac_whitelist' >/dev/null 2>&1" \
        "Activating MAC access control" \
        '"$iptables" -t nat -I PREROUTING -s 192.168.2.0/24 -j DROP'
}

startmacwhitelist() {
    ## Adding MAC addresses for allowed clients
    run "(read i <'$mac_whitelist') 2>/dev/null" \
        "Adding MAC addresses for allowed clients" \
        "(while read mac; do '$iptables' -t nat -I PREROUTING -m mac --mac-source \$mac -j ACCEPT || exit 1; done) <'$mac_whitelist'"
}

case "$1" in
'start')
    rm "$tetherlog" 2>/dev/null
  	startwifi
  	startint
  	startipt
  	startipfw
  	startdnsmasq
  	startsecnat
  	startmacwhitelist
;;
'startbt')
    rm "$tetherlog" 2>/dev/null
    if eval { "dd if='/sdcard/android.tether/bnep.ko' >/dev/null 2>&1;" } >/dev/null 2>&1; then
    	startbluetooth
    fi
  	startpand
  	startipt
  	startipfw    
    startsecnat
    startmacwhitelist
;;    
'stop')
    rm "$tetherlog" 2>/dev/null
    rm "$dnsmasq_leasefile" 2>/dev/null
    stopdnsmasq
    stopint
    stopwifi
    stopipfw
    stopipt
;;
'stopbt')
    rm "$tetherlog" 2>/dev/null
    rm "$dnsmasq_leasefile" 2>/dev/null
    stopdnsmasq
    stoppand
    stopbluetooth
    stopipfw
    stopipt       
;;
'restartsecwifi')
    stopipt
    startipt
    startsecnat
    startmacwhitelist
;;
*)
echo "Usage: $0 [start|startbt|stop|stopbt]"
;;
esac
